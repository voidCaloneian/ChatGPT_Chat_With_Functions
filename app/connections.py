from typing import Any, Dict, List

from fastapi import WebSocket
from loguru import logger
from openai.types.chat.chat_completion_system_message_param import (
    ChatCompletionSystemMessageParam,
)


class ConnectionManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """

    def __init__(self) -> None:
        self.active_connections: Dict[WebSocket, List[Any]] = {}

    async def connect(self, websocket: WebSocket) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.

        :param websocket: –û–±—ä–µ–∫—Ç WebSocket.
        """
        await websocket.accept()
        self.active_connections[websocket] = [
            ChatCompletionSystemMessageParam(
                content=(
                    "–ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏, –∫–æ–≥–¥–∞ –æ–Ω–∏ —É–º–µ—Å—Ç–Ω—ã üòä, "
                    "–∞ —Ç–∞–∫–∂–µ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –ü–∏—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É, "
                    "–º–∏–Ω–∏–º–∏–∑–∏—Ä—É–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã. –í —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π Markdown, "
                    "—Ç–∞–∫–∂–µ –∫–æ–¥ –æ–±–æ—Ä–∞—á–∏–≤–∞–π –≤ ```—è–∑—ã–∫\n<–∫–æ–¥>\n```."
                ),
                role="system",
            )
        ]
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {}", websocket.client)

    def disconnect(self, websocket: WebSocket) -> None:
        """
        –†–∞–∑—Ä—ã–≤–∞–µ—Ç WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.

        :param websocket: –û–±—ä–µ–∫—Ç WebSocket.
        """
        if websocket in self.active_connections:
            del self.active_connections[websocket]
            logger.info("WebSocket –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {}", websocket.client)

    def get_history(self, websocket: WebSocket) -> List[Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.

        :param websocket: –û–±—ä–µ–∫—Ç WebSocket.
        :return: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
        """
        return self.active_connections.get(websocket, [])

    def add_message(self, websocket: WebSocket, message: Any) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.

        :param websocket: –û–±—ä–µ–∫—Ç WebSocket.
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
        """
        if websocket in self.active_connections:
            self.active_connections[websocket].append(message)
