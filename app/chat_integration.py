import json
import asyncio
import os
from typing import Any, Dict, List

from loguru import logger
from openai import AsyncOpenAI

from app.api_clients import get_weather, get_dollar_rate, get_weekly_news
from app.config import ASSISTANT
from openai.types.chat.chat_completion_message import ChatCompletionMessage
from openai.types.chat.chat_completion_tool_message_param import (
    ChatCompletionToolMessageParam,
)
from openai.types.chat.chat_completion_message_tool_call import (
    ChatCompletionMessageToolCall,
)


openai = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))


# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è ChatGPT üòä
tools: List[Dict[str, Any]] = [
    {
        "type": "function",
        "function": {
            "name": "get_weather",
            "description": "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.",
            "parameters": {
                "type": "object",
                "properties": {
                    "location": {
                        "type": "string",
                        "description": "–ì–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: Bogot√°, Colombia (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)",
                    }
                },
                "required": ["location"],
                "additionalProperties": False,
            },
            "strict": True,
        },
    },
    {
        "type": "function",
        "function": {
            "name": "get_dollar_rate",
            "description": "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ USD –∫ RUB.",
            "parameters": {
                "type": "object",
                "properties": {},
                "required": [],
                "additionalProperties": False,
            },
            "strict": True,
        },
    },
    {
        "type": "function",
        "function": {
            "name": "get_weekly_news",
            "description": "–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ.",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {"type": "string", "description": "–¢–µ–º–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"}
                },
                "required": ["query"],
                "additionalProperties": False,
            },
            "strict": True,
        },
    },
]


async def process_tool_calls(
    message: ChatCompletionMessage, websocket: Any, connection_manager: Any
) -> List[ChatCompletionToolMessageParam]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ç ChatGPT –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ChatGPT —Å –ø–æ–ª–µ–º tool_calls.
    :param websocket: –û–±—ä–µ–∫—Ç WebSocket.
    :param connection_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
    :return: –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
    """
    responses: List[ChatCompletionToolMessageParam] = []

    # –°–ª–æ–≤–∞—Ä—å, —Å–≤—è–∑—ã–≤–∞—é—â–∏–π –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å –µ—ë —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π
    tool_functions = {
        "get_weather": lambda args: get_weather(args.get("location", "None")),
        "get_dollar_rate": lambda _: get_dollar_rate(),
        "get_weekly_news": lambda args: get_weekly_news(args.get("query", "None")),
    }

    if message.tool_calls:
        logger.info("–ú–æ–¥–µ–ª—å —Ä–µ—à–∏–ª–∞ –≤—ã–∑–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã üëç.")
        connection_manager.add_message(websocket, message)

        async def call_tool(tool_call) -> ChatCompletionToolMessageParam:
            func_name = tool_call.function.name
            logger.info("–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {}", func_name)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å
            try:
                arguments = json.loads(tool_call.function.arguments)
            except json.JSONDecodeError as e:
                logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {}", e)
                arguments = {}

            # –ù–∞–π–¥–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ –∏–º–µ–Ω–∏
            function_to_call = tool_functions.get(func_name)
            if function_to_call is None:
                result = f"–§—É–Ω–∫—Ü–∏—è {func_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                logger.error(result)
            else:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
                result = await asyncio.to_thread(function_to_call, arguments)
                logger.info("–û—Ç–≤–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {}", result)

            tool_response = ChatCompletionToolMessageParam(
                content=str(result), role="tool", tool_call_id=tool_call.id
            )
            connection_manager.add_message(websocket, tool_response)
            return tool_response

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ (tasks) –¥–ª—è –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tasks = [call_tool(tool_call) for tool_call in message.tool_calls]
        # –ì–µ–π–∑–µ—Ä–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        responses = await asyncio.gather(*tasks)

    return responses


async def create_stream_message(
    history: List[Any],
    websocket: Any,
) -> ChatCompletionMessage:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ChatGPT —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ WebSocket.

    :param history: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –º–æ–¥–µ–ª—å.
    :param websocket: –û–±—ä–µ–∫—Ç WebSocket –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É.
    :return: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    """
    stream = await openai.chat.completions.create(
        model="gpt-4o",
        messages=history,
        tools=tools,
        stream=True,
    )

    assistant_text: str = ""
    final_tool_calls: Dict[int, Any] = {}

    async for chunk in stream:
        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–∑–æ–≤–∞–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        for tool_call in chunk.choices[0].delta.tool_calls or []:
            index: int = tool_call.index
            if index not in final_tool_calls:
                final_tool_calls[index] = tool_call
            else:
                final_tool_calls[
                    index
                ].function.arguments += tool_call.function.arguments

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if chunk.choices[0].delta.content is not None:
            text_chunk: str = chunk.choices[0].delta.content
            assistant_text += text_chunk
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —á–µ—Ä–µ–∑ WebSocket –∫–ª–∏–µ–Ω—Ç—É
            await websocket.send_text(text_chunk)

    # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∫–∞–∂–¥—ã–π tool_call –≤ ChatCompletionMessageToolCall
    final_tool_call_objs: List[ChatCompletionMessageToolCall] = [
        ChatCompletionMessageToolCall(**tool_call.dict())
        for tool_call in final_tool_calls.values()
    ]

    logger.success(assistant_text)
    logger.warning(final_tool_call_objs)

    assistant_message = ChatCompletionMessage(
        role=ASSISTANT,
        content=assistant_text,
        tool_calls=final_tool_call_objs if final_tool_call_objs else None,
    )

    return assistant_message
